# Continue in background after startup
# background

# Save the pid to PIDFILE when backgrounding
# pid-file=PIDFILE

# Use SSL client certificate CERT which may be either a file name or, if OpenConnect has been built with an appropriate version of GnuTLS, a PKCS#11 URL.
# certificate=CERT

# Give a warning when SSL client certificate has DAYS left before expiry
# cert-expire-warning=DAYS

# Use SSL private key KEY which may be either a file name or, if OpenConnect has been built with an appropriate version of GnuTLS, a PKCS#11 URL.
# sslkey=KEY

# Use authentication cookie COOKIE.
# cookie=COOKIE

# Read cookie from standard input.
# cookie-on-stdin

# Enable all compression, including stateful modes. By default, only stateless compression algorithms are enabled.
# deflate

# Disable all compression.
# no-deflate

# Set compression mode, where MODE is one of stateless, none, or all.
# By default, only stateless compression algorithms which do not maintain state from one packet to the next (and which can be used on UDP transports) are enabled. By setting the mode to all stateful algorithms (currently only zlib deflate) can be enabled. Or all compression can be disabled by setting the mode to none.
# compression=MODE

# Use INTERVAL as minimum Dead Peer Detection interval for CSTP and DTLS, forcing use of DPD even when the server doesn’t request it.
# force-dpd=INTERVAL

# Use GROUP as login UserGroup
# usergroup=GROUP

# Provide authentication form input, where FORM and OPTION are the identifiers from the form and the specific input field, and VALUE is the string to be filled in automatically. For example, the standard username field (also handled by the --user option) could also be provided with this option thus: --form-entry main:username=joebloggs.
# form-entry=FORM:OPTION=VALUE

# Display help text
# help

# Use only the specified methods for HTTP authentication to a server. By default, only Negotiate, NTLM and Digest authentication are enabled. Basic authentication is also supported but because it is insecure it must be explicitly enabled. The argument is a comma-separated list of methods to be enabled. Note that the order does not matter: OpenConnect will use Negotiate, NTLM, Digest and Basic authentication in that order, if each is enabled, regardless of the order specified in the METHODS string.
# http-auth=METHODS

# Use IFNAME for tunnel interface
# interface=IFNAME

# Use syslog for progress messages
syslog

# Prepend a timestamp to each progress message
# timestamp

# Copy TOS / TCLASS of payload packet into DTLS packets.
# passtos

# Drop privileges after connecting, to become user USER
# setuid=USER

# Drop privileges during execution of trojan binary or script (CSD, TNCC, or HIP).
# csd-user=USER

# Run SCRIPT instead of the trojan binary or script.
# csd-wrapper=SCRIPT

# Request MTU from server as the MTU of the tunnel.
# mtu=MTU

# Indicate MTU as the path MTU between client and server on the unencrypted network. Newer servers will automatically calculate the MTU to be used on the tunnel from this value.
# base-mtu=MTU

# Provide passphrase for certificate file, or SRK (System Root Key) PIN for TPM
# key-password=PASS

# Use HTTP or SOCKS proxy for connection. A username and password can be provided in the given URL, and will be used for authentication. If authentication is required but no credentials are given, GSSAPI and automatic NTLM authentication using Samba’s ntlm_auth helper tool may be attempted.
# proxy=PROXYURL

# Use only the specified methods for HTTP authentication to a proxy. By default, only Negotiate, NTLM and Digest authentication are enabled. Basic authentication is also supported but because it is insecure it must be explicitly enabled. The argument is a comma-separated list of methods to be enabled. Note that the order does not matter: OpenConnect will use Negotiate, NTLM, Digest and Basic authentication in that order, if each is enabled, regardless of the order specified in the METHODS string.
# proxy-auth=METHODS

# Disable use of proxy
# no-proxy

# Use libproxy to configure proxy automatically (when built with libproxy support)
# libproxy

# Passphrase for certificate file is automatically generated from the fsid of the file system on which it is stored. The fsid is obtained from the statvfs(2) or statfs(2) system call, depending on the operating system. On a Linux or similar system with GNU coreutils, the fsid used by this option should be equal to the output of the command:
# key-password-from-fsid

# It is not the same as the 128-bit UUID of the file system.
# printf=%i\\n $CERTIFICATE

# Less output
# quiet

# Set packet queue limit to LEN pkts
# queue-len=LEN

# Invoke SCRIPT to configure the network after connection. Without this, routing and name service are unlikely to work correctly. The script is expected to be compatible with the vpnc-script which is shipped with the "vpnc" VPN client. See http://www.infradead.org/openconnect/vpnc-script.html for more information. This version of OpenConnect is configured to use /etc/vpnc/vpnc-script by default.

# On Windows, a relative directory for the default script will be handled as starting from the directory that the openconnect executable is running from, rather than the current directory. The script will be invoked with the command-based script host cscript.exe.
# script=SCRIPT

# Pass traffic to ’script’ program over a UNIX socket, instead of to a kernel tun/tap device. This allows the VPN IP traffic to be handled entirely in userspace, for example by a program which uses lwIP to provide SOCKS access into the VPN.
# script-tun

# Set login username to NAME
# user=NAME

# Report version number
# version

# More output (may be specified multiple times for additional output)
# verbose

# XML config file
# xmlconfig=CONFIG

# Choose authentication login selection
# authgroup=GROUP

# Authenticate only, and output the information needed to make the connection a form which can be used to set shell environment variables. When invoked with this option, openconnect will not make the connection, but if successful will output something like the following to stdout: 
# COOKIE=3311180634@13561856@1339425499@B315A0E29D16C6FD92EE... 
# HOST=10.0.0.1 
# FINGERPRINT=469bb424ec8835944d30bc77c77e8fc1d8e23a42 
# Thus, you can invoke openconnect as a non-privileged user (with access to the user’s PKCS#11 tokens, etc.) for authentication, and then invoke openconnect separately to make the actual connection as root: 
# eval ‘openconnect --authenticate https://vpnserver.example.com‘; 
# [ -n $COOKIE ] && echo $COOKIE |    
# sudo openconnect --cookie-on-stdin $HOST --servercert $FINGERPRINT
# authenticate

# Fetch and print cookie only; don’t connect
# cookieonly

# Print cookie before connecting
# printcookie

# Cert file for server verification
cafile=/etc/ssl/cert.pem

# Do not advertise IPv6 capability to server
# disable-ipv6

# Set OpenSSL ciphers to support for DTLS
# dtls-ciphers=LIST

# Set OpenSSL ciphers for Cisco’s DTLS v1.2
# dtls12-ciphers=LIST

# Use PORT as the local port for DTLS and UDP datagrams
# dtls-local-port=PORT

# Enable verbose output of all HTTP requests and the bodies of all responses received from the server.
# dump-http-traffic

# Do not trust the system default certificate authorities. If this option is given, only certificate authorities given with the --cafile option, if any, will be trusted automatically.
# no-system-trust

# Enforces Perfect Forward Secrecy (PFS). That ensures that if the server’s long-term key is compromised, any session keys established before the compromise will be unaffected. If this option is provided and the server does not support PFS in the TLS channel the connection will fail.
# PFS is available in Cisco ASA releases 9.1(2) and higher; a suitable cipher suite may need to be manually enabled by the administrator using the ssl encryption setting.
# pfs

# Disable DTLS and ESP
# no-dtls

# Version 8.2.2.5 of the Cisco ASA software has a bug where it will forget the client’s SSL certificate when HTTP connections are being re-used for multiple requests. So far, this has only been seen on the initial connection, where the server gives an HTTP/1.0 redirect response with an explicit Connection: Keep-Alive directive. OpenConnect as of v2.22 has an unconditional workaround for this, which is never to obey that directive after an HTTP/1.0 response.

# However, Cisco’s support team has failed to give any competent response to the bug report and we don’t know under what other circumstances their bug might manifest itself. So this option exists to disable ALL re-use of HTTP sessions and cause a new connection to be made for each request. If your server seems not to be recognising your certificate, try this option. If it makes a difference, please report this information to the openconnect-devel@lists.infradead.org mailing list.
# no-http-keepalive

# Never attempt password (or SecurID) authentication.
# no-passwd

# Do not attempt to post an XML authentication/configuration request to the server; use the old style GET method which was used by older clients and servers instead.
# This option is a temporary safety net, to work around potential compatibility issues with the code which falls back to the old method automatically. It causes OpenConnect to behave more like older versions (4.08 and below) did. If you find that you need to use this option, then you have found a bug in OpenConnect. Please see http://www.infradead.org/openconnect/mail.html and report this to the developers.
# no-xmlpost

# Do not expect user input; exit if it is required.
# non-inter

# Read password from standard input
# passwd-on-stdin

# Select VPN protocol PROTO to be used for the connection. Supported protocols are anyconnect for Cisco AnyConnect (the default), nc for experimental support for Juniper Network Connect (also supported by Junos Pulse servers), and gp for experimental support for PAN GlobalProtect.
# protocol=PROTO

# Enable one-time password generation using the MODE algorithm. --token-mode=rsa will call libstoken to generate an RSA SecurID tokencode, --token-mode=totp will call liboath to generate an RFC 6238 time-based password, and --token-mode=hotp will call liboath to generate an RFC 4226 HMAC-based password. Yubikey tokens which generate OATH codes in hardware are supported with --token-mode=yubioath
# token-mode=MODE

# The secret to use when generating one-time passwords/verification codes. Base 32-encoded TOTP/HOTP secrets can be used by specifying "base32:" at the beginning of the secret, and for HOTP secrets the token counter can be specified following a comma.
# RSA SecurID secrets can be specified as an Android/iPhone URI or a raw numeric CTF string (with or without dashes).
# For Yubikey OATH the token secret specifies the name of the credential to be used. If not provided, the first OATH credential found on the device will be used.
# FILENAME, if specified, can contain any of the above strings. Or, it can contain a SecurID XML (SDTID) seed.
# If this option is omitted, and --token-mode is "rsa", libstoken will try to use the software token seed saved in ~/.stokenrc by the "stoken import" command.
# token-secret={ SECRET[,COUNTER] | @FILENAME }

# Keep reconnect attempts until so much seconds are elapsed. The default timeout is 300 seconds, which means that openconnect can recover VPN connection after a temporary network down time of 300 seconds.
# reconnect-timeout

# Automatically resolve the hostname HOST to IP instead of using the normal resolver to look it up.
# resolve=HOST:IP

# Accept server’s SSL certificate only if the provided fingerprint matches. The allowed fingerprint types are SHA1, SHA256, and PIN-SHA256. They are distinguished by the ’sha1:’, ’sha256:’ and ’pin-sha256:’ prefixes to the encoded hash. The first two are custom identifiers providing hex encoding of the peer’s public key, while ’pin-sha256:’ is the RFC7469 key PIN, which utilizes base64 encoding. To ease certain testing use-cases, a partial match of the hash will also be accepted, if it is at least 4 characters past the prefix.
# servercert=HASH

# Use STRING as ’User-Agent:’ field value in HTTP header. (e.g. --useragent ’Cisco AnyConnect VPN Agent for Windows 2.2.0133’)
# useragent=STRING

# Use STRING as the software version reported to the head end. (e.g. --version-string ’2.2.0133’)
# version-string=STRING

# Use STRING as ’X-CSTP-Hostname:’ field value in HTTP header. For example --local-hostname ’mypc’, will advertise the value ’mypc’ as the suggested hostname to point to the provided IP address.
# local-hostname=STRING

# OS type to report to gateway. Recognized values are: linux, linux-64, win, mac-intel, android, apple-ios. Reporting a different OS type may affect the dynamic access policy (DAP) applied to the VPN session. If the gateway requires CSD, it will also cause the corresponding CSD trojan binary to be downloaded, so you may need to use --csd-wrapper if this code is not executable on the local machine.
# os=STRING
